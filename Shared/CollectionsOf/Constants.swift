// Copyright Â© 2022 Tokenary. All rights reserved.

import Foundation

public struct Constants {
    // MARK: - Public Properties

    public static var isDebug: Bool {
        #if DEBUG
        return true
        #else
        return false
        #endif
    }

    public static var isAppExtension: Bool {
        Bundle.main.bundleURL.pathExtension == FileExt.applicationExtension.rawValue
    }
    
    public static var isWidgetExtension: Bool { (Bundle.main.bundleIdentifier ?? .empty).contains("widget") }
    
    public static var keychainGroup: String {
        #if DEBUG
        return Bundle.main.infoDictionary?["KEYCHAIN_ENTITLEMENT"] as? String ?? .empty
        #else
        return "" // ToDo(@petrrk) - Add entitlement parser
        #endif
    }

    public static var appGroupID: String {
        #if DEBUG
        return Bundle.main.infoDictionary?["APP_GROUP_ENTITLEMENT"] as? String ?? .empty
        #else
        return "" // ToDo(@petrrk) - Add entitlement parser
        #endif
    }

    public static var isOnboardingShown: Bool {
        get {
            UserDefaults.standard.bool(forKey: UserDefaultsKey.isOnboardingShown)
        }
        set {
            UserDefaults.standard.set(newValue, forKey: UserDefaultsKey.isOnboardingShown)
            UserDefaults.standard.synchronize()
        }
    }

    // MARK: - API Stuff

    public static var defaultPort: Int = 8888

    public static var apiTimeout: TimeInterval {
        #if DEBUG
        let timeoutValue = UserDefaults.standard.object(forKey: SettingsBundleKeys.timeout) as? String
        guard let timeout = timeoutValue else {
            return defaultAPITimeout
        }
        return TimeInterval(timeout) ?? defaultAPITimeout
        #else
        return defaultTimeout
        #endif
    }

    public static var apiBaseURL: String {
        #if DEBUG
        let sharedDefaults = UserDefaults(suiteName: appGroupID)
        let standartDefaults = UserDefaults.standard
        var rawServerString: String?
        if isAppExtension {
            rawServerString = sharedDefaults?.object(forKey: SettingsBundleKeys.serverString) as? String
        } else {
            rawServerString = standartDefaults.object(forKey: SettingsBundleKeys.serverString) as? String
        }

        if
            let serverString = rawServerString,
            !serverString.isEmpty {
            return serverString
        }
        return defaultApiURL
        #else
        return defaultApiURL
        #endif
    }

    // MARK: - Databases
    
    public static let currentKeychainMigrationVersion: String = "0.0.1"

    public struct Database {
        public static let databaseName = "MDB"
        public static let databaseVersion: UInt64 = 1
    }
    
    // MARK: - Schemes

    public static let tokenarySchemePrefix = "tokenary://"
    
    public static let contactsPhoneSchemeTemplate = "tel://%@"
    public static let tokenarySchemeTemplate = "tokenary://%@"

    // MARK: - Global Links
    
    public enum Links {
        public static let tokenarySiteURL = "https://tokenary.io"
        public static let rateAppstore = "https://itunes.apple.com/"
    }

    // MARK: - 3rd Party

    public struct GoogleMap {
        public static let apiKey = "???"
    }
    
    public struct Amplitude {
        public static let apiKey = "???"
    }
    
    // MARK: - Other
    
    public static let saveFilesIdentifier = "com.apple.CloudDocsUI.AddToiCloudDrive"

    // MARK: - Private Properties

    private static let defaultAPITimeout: TimeInterval = 60

    private static var defaultApiURL: String {
        #if DEBUG
        return "http://127.0.0.1:\(LaunchFlagHelper.serverPort)"
        #else
        return "???"
        #endif
    }
}

/// Normal keys for objects in `UserDefaults`
private enum UserDefaultsKey {
    static let anyCacheDate = "Tokenary.Defaults.cache.anyCacheDate"
    
    static let isOnboardingShown: String = "Tokenary.Defaults.is_onboarding_shown"
}

/// Autogenerated keys for `UserDefaults`, that should come from `Settings.Bundle`
private enum SettingsBundleKeys {
    static let serverString = "Tokenary.Settings.server_url"

    static let timeout = "Tokenary.Settings.server_timeout"
}
